# -*- coding: utf-8 -*-
"""buoyant_force_from_volume_and_density.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xlFQ4QkRMsWn8-7weSHc5qnnDE7sMwWQ
"""

from sympy import (Eq, solve)
from symplyphysics import (units, Quantity, Symbol, print_expression, validate_input, validate_output)

# Description
## Any object immersed in liquid is affected by a buoyant force equal to the weight of the liquid displaced by it.
## Law: F = ro*g* V, where
## ro is density of liquid,
## g is acceleration of free fall,
## V is volume of object immersed in liquid.


liquid_density = Symbol("liquid_density", units.mass / units.volume)
free_fall_acceleration = Symbol("free_fall_acceleration", units.acceleration)
object_volume = Symbol("object_volume", units.volume)

law = Eq(liquid_density * free_fall_acceleration * object_volume)


def print_law() -> str:
    return print_expression(law)


@validate_input(liquid_density_=liquid_density, object_volume_=object_volume)
@validate_output(buoyant_force)
def calculate_buoyant_force(liquid_density_: Quantity, object_volume_: Quantity) -> Quantity:
    result_buoyant_force = solve(law, buoyant_force, dict=True)[0][buoyant_force]
    result_expr = result_buoyant_force.subs({liquid_density: liquid_density_, object_volume: object_volume_})
    return Quantity(result_expr)